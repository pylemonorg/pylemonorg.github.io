<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://pylemonorg.github.io</id>
    <title>Gridea</title>
    <updated>2020-08-02T09:29:46.176Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://pylemonorg.github.io"/>
    <link rel="self" href="https://pylemonorg.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://pylemonorg.github.io/images/avatar.png</logo>
    <icon>https://pylemonorg.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[windows charles安装使用教程]]></title>
        <id>https://pylemonorg.github.io/post/windows-charles-an-zhuang-shi-yong-jiao-cheng/</id>
        <link href="https://pylemonorg.github.io/post/windows-charles-an-zhuang-shi-yong-jiao-cheng/">
        </link>
        <updated>2020-08-02T09:10:40.000Z</updated>
        <summary type="html"><![CDATA[<p></p>
<p>Charles is an HTTP proxy / HTTP monitor / Reverse Proxy that enables a developer to view all of the HTTP and SSL / HTTPS traffic between their machine and the Internet. This includes requests, responses and the HTTP headers (which contain the cookies and caching information).</p>
]]></summary>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#%E5%AE%89%E8%A3%85">安装</a>
<ul>
<li><a href="#%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80">下载地址</a></li>
<li><a href="#%E6%B3%A8%E5%86%8C">注册</a></li>
</ul>
</li>
<li><a href="#%E9%85%8D%E7%BD%AEhttps%E8%AF%81%E4%B9%A6">配置HTTPS证书</a>
<ul>
<li><a href="#%E5%AE%89%E8%A3%85pc%E8%AF%81%E4%B9%A6">安装PC证书</a></li>
<li><a href="#%E9%85%8D%E7%BD%AE%E7%9B%91%E5%90%AC%E7%AB%AF%E5%8F%A3">配置监听端口</a></li>
<li><a href="#%E6%89%8B%E6%9C%BA%E5%AE%89%E8%A3%85%E8%AF%81%E4%B9%A6">手机安装证书</a></li>
</ul>
</li>
<li><a href="#%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B">使用教程</a>
<ul>
<li><a href="#%E8%BF%87%E6%BB%A4%E4%BD%BF%E7%94%A8">过滤使用</a></li>
<li><a href="#%E9%87%8D%E5%8F%91%E8%AF%B7%E6%B1%82">重发请求</a></li>
<li><a href="#%E7%BC%96%E8%BE%91%E8%AF%B7%E6%B1%82">编辑请求</a></li>
<li><a href="#%E6%96%AD%E7%82%B9%E6%A8%A1%E5%BC%8F">断点模式</a></li>
<li><a href="#%E6%A8%A1%E6%8B%9F%E7%BD%91%E9%80%9F">模拟网速</a></li>
<li><a href="#%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86">反向代理</a></li>
</ul>
</li>
</ul>
</p>
<p>Charles is an HTTP proxy / HTTP monitor / Reverse Proxy that enables a developer to view all of the HTTP and SSL / HTTPS traffic between their machine and the Internet. This includes requests, responses and the HTTP headers (which contain the cookies and caching information).</p>
<!-- more -->
<h1 id="安装">安装</h1>
<h2 id="下载地址">下载地址</h2>
<p>官网下载地址：https://www.charlesproxy.com/latest-release/download.do<br>
官网下载慢，也可以通过我上传的下载 https://download.csdn.net/download/qq_27648991/12320355</p>
<h2 id="注册">注册</h2>
<blockquote>
<p>下载安装之后，默认是试用30天的，之后使用会被限制。  这里我为大家准备了注册需要的密钥<br>
Registered Name(区分大小写): Charles_Key<br>
License Key: 0AB20E919CD224F5EE</p>
</blockquote>
<p>我这注册过了，大家在这注册。<br>
<img src="https://img-blog.csdnimg.cn/20200726164619192.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NjQ4OTkx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<h1 id="配置https证书">配置HTTPS证书</h1>
<h2 id="安装pc证书">安装PC证书</h2>
<blockquote>
<p>安装步骤如图所示</p>
</blockquote>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200410160728449.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NjQ4OTkx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<blockquote>
<p>证书安装注意安装位置：</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/2020041016101598.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NjQ4OTkx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
这时证书安装完毕！</p>
<h2 id="配置监听端口">配置监听端口</h2>
<blockquote>
<p>在设置窗口中选择：Proxy → SSL Proxy Settings<br>
在里面配置监听全部端口（*表示全部）<br>
配置完之后，就可以拦截请求了。</p>
</blockquote>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200410161424571.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NjQ4OTkx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="手机安装证书">手机安装证书</h2>
<blockquote>
<p>我这是安卓手机，安装方式如图</p>
</blockquote>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20200410161921109.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NjQ4OTkx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<blockquote>
<p>这时提示手机需要设置代理IP和端口，那就去配置。<br>
<img src="https://img-blog.csdnimg.cn/20200410162536607.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NjQ4OTkx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
</blockquote>
<blockquote>
<p>打开手机WIFI高级设置，配置代理服务器。（提示：必须跟电脑连用一个网络）设置刚刚提示的代理ip和端口，具体操作如图：</p>
</blockquote>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20200410162635792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NjQ4OTkx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<blockquote>
<p>这时软件提示，点击Allow<br>
<img src="https://img-blog.csdnimg.cn/20200410162933401.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NjQ4OTkx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
</blockquote>
<blockquote>
<p>在手机中打开浏览器中打开：http://chls.pro/ssl<br>
下载证书安装 如图所示：</p>
</blockquote>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/20200410163826841.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NjQ4OTkx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<blockquote>
<p>这时用手机浏览器打开百度就可以通过Charles 就看见拦截的HTTPS请求了，说明成功！</p>
</blockquote>
<figure data-type="image" tabindex="6"><img src="https://img-blog.csdnimg.cn/20200410164157573.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NjQ4OTkx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="使用教程">使用教程</h1>
<h2 id="过滤使用">过滤使用</h2>
<blockquote>
<p>实例：<br>
这里我只查看 httpbin.org 请求，过滤设置参考如下：</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200726165142533.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NjQ4OTkx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200726165212615.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NjQ4OTkx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
在Filter输入框输入httpbin.org。这时，我们需要的请求就被筛选出来了。我们可以把符合的请求置顶显示，把其他请求放入其他请求中。</p>
<figure data-type="image" tabindex="7"><img src="https://img-blog.csdnimg.cn/20200726165452737.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NjQ4OTkx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<p>给需要请求的（我这里是httpbin.org）右键设置Focus，把Filter 输入框清空。这时需要的请求被置顶显示，其他的请求被归为other里面了。很方便查看。<br>
<img src="https://img-blog.csdnimg.cn/20200726165629412.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NjQ4OTkx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="重发请求">重发请求</h2>
<figure data-type="image" tabindex="8"><img src="https://img-blog.csdnimg.cn/20200726175020729.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NjQ4OTkx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="编辑请求">编辑请求</h2>
<figure data-type="image" tabindex="9"><img src="https://img-blog.csdnimg.cn/20200726175054313.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NjQ4OTkx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="断点模式">断点模式</h2>
<p><img src="https://img-blog.csdnimg.cn/20200726180539727.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NjQ4OTkx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/2020072618071438.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NjQ4OTkx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<h2 id="模拟网速">模拟网速</h2>
<figure data-type="image" tabindex="10"><img src="https://img-blog.csdnimg.cn/20200726181235738.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NjQ4OTkx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="反向代理">反向代理</h2>
<figure data-type="image" tabindex="11"><img src="https://img-blog.csdnimg.cn/20200726221053753.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NjQ4OTkx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mitmproxy详细教程及二级代理]]></title>
        <id>https://pylemonorg.github.io/post/hello-gridea/</id>
        <link href="https://pylemonorg.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p></p>
<p>mitmproxy is a free and open source interactive HTTPS proxy</p>
]]></summary>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#%E7%AE%80%E4%BB%8B-%E5%8F%82%E8%80%83">简介-参考</a></li>
<li><a href="#%E5%AE%89%E8%A3%85">安装</a>
<ul>
<li><a href="#linux%E4%B8%8B%E7%9A%84%E5%AE%89%E8%A3%85">Linux下的安装</a></li>
<li><a href="#mac%E4%B8%8B%E7%9A%84%E5%AE%89%E8%A3%85">Mac下的安装</a></li>
</ul>
</li>
<li><a href="#%E5%AE%89%E8%A3%85%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6">安装数字证书</a>
<ul>
<li><a href="#windows">windows</a></li>
<li><a href="#mac">mac</a></li>
<li><a href="#android-and-ios">android and ios</a></li>
<li><a href="#web%E5%AE%89%E8%A3%85">web安装</a></li>
</ul>
</li>
<li><a href="#%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4">操作命令</a>
<ul>
<li><a href="#pip-install-mitmproxy">pip install mitmproxy</a></li>
<li><a href="#%E5%90%AF%E5%8A%A8">启动</a></li>
<li><a href="#%E5%8F%82%E6%95%B0">参数</a></li>
</ul>
</li>
<li><a href="#%E6%8B%A6%E6%88%AApc%E8%AF%B7%E6%B1%82%E8%AE%BE%E7%BD%AE">拦截pc请求设置</a></li>
<li><a href="#%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81">示例代码</a></li>
<li><a href="#%E9%85%8D%E7%BD%AE%E4%BA%8C%E7%BA%A7%E4%BB%A3%E7%90%86">配置二级代理</a>
<ul>
<li><a href="#%E6%96%B9%E6%B3%95%E4%B8%80">方法一</a>
<ul>
<li><a href="#%E4%BF%AE%E6%94%B9x2yyy%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">修改X2yyy配置文件</a></li>
<li><a href="#%E6%8B%A6%E6%88%AA%E6%96%87%E4%BB%B6">拦截文件</a></li>
<li><a href="#%E5%90%AF%E5%8A%A8%E6%96%87%E4%BB%B6">启动文件</a></li>
</ul>
</li>
<li><a href="#%E6%96%B9%E6%B3%95%E4%BA%8C">方法二</a></li>
</ul>
</li>
</ul>
</p>
<p>mitmproxy is a free and open source interactive HTTPS proxy</p>
<!-- more -->
<h1 id="简介-参考">简介-参考</h1>
<blockquote>
<p><strong>windows不支持mitmproxy的控制台的接口输出，但是可以使用mitmdump和mitmweb</strong></p>
</blockquote>
<ul>
<li>参考</li>
<li><a href="https://mitmproxy.org/">官网</a></li>
<li><a href="https://github.com/mitmproxy/mitmproxy">github</a></li>
<li><a href="http://www.cnblogs.com/grandlulu/p/9525417.html">国内博客</a></li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200427191506954.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NjQ4OTkx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<center>- 版本参考 -</center>
<h1 id="安装">安装</h1>
<h2 id="linux下的安装">Linux下的安装</h2>
<ul>
<li>下载之后，需要解压并将其配置环境变量中：</li>
<li><code>tar -zxvf mitmproxy.....-linux.tar.gz</code>  解压</li>
<li><code>sodu mv mitmproxy mitmdump mitmweb /user/bin</code>  配置环境</li>
<li>这样就可以将3个可执行文件移动了/usr/bin目录。而一般情况下，/usr/bin目录的已经配置在环境变量下，就可以直接调用这3个工具</li>
</ul>
<h2 id="mac下的安装">Mac下的安装</h2>
<ul>
<li>直接使用 <code>brew install mitmproxy</code></li>
</ul>
<h1 id="安装数字证书">安装数字证书</h1>
<p>运行<code>mitdump</code>命令即可  <strong>注意：在当前目录生成.mimtproxy文件</strong><br>
<img src="https://img-blog.csdnimg.cn/20200427191600447.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NjQ4OTkx,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-HAXyyQda-1587985997338)(1483FF23990B41E9BAE1A41FE61C6B4A)]" loading="lazy"></p>
<h2 id="windows">windows</h2>
<p>双击<code>mitmproxy-ca.p12</code>安装到“受信任的根证书颁发机构”即可</p>
<h2 id="mac">mac</h2>
<p>双击<code>mitmproxy-ca-cert.pem</code>选择 <strong>“始终信任”</strong></p>
<h2 id="android-and-ios">android and ios</h2>
<ul>
<li>把<code>mitmproxy-ca-cert.pem</code>证书发送到手机上，安装证书</li>
<li>选择与pc端相同的wifi进行连接，配置pc端的ip选择和8080端口即可</li>
</ul>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200427191627817.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NjQ4OTkx,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-7KSfKJe6-1587985997339)(9963B582E91E4A868DFA587FA571A184)]" loading="lazy"></figure>
<h2 id="web安装">web安装</h2>
<ul>
<li>cmd:<code>mitmdump --mode reverse:http://mitm.it/ -p 8080</code></li>
<li>打开浏览器输入localhost:8080 下载对应的安装包即可</li>
</ul>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20200427191648594.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NjQ4OTkx,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-TDXz5qSJ-1587985997340)(5335AEBBC1D44B59A4452984393F6B5D)]" loading="lazy"></figure>
<h1 id="操作命令">操作命令</h1>
<h2 id="pip-install-mitmproxy">pip install mitmproxy</h2>
<h2 id="启动">启动</h2>
<ul>
<li>启动命令<code>mitmporxy</code> 默认在8080端口开启  <strong>windows不支持</strong></li>
<li>启动视图监听命令 <code>mitmweb</code></li>
<li>启动监听命令<code>mimtdump</code>默认在8080端口开启</li>
</ul>
<h2 id="参数">参数</h2>
<ul>
<li><code>-s</code> 在当前目录下启动文件  例<code>mitmdump -s script.py</code></li>
<li><code>-p</code> 修改默认端口  例<code>mitmweb -p 8888</code></li>
<li><code>-w</code> 把截获的数据保存到文件  例<code>mitmdump -w file_name</code></li>
</ul>
<h1 id="拦截pc请求设置">拦截pc请求设置</h1>
<blockquote>
<p>方式一 【推荐】：<br>
给本地计算机设置代理即可，这样就可以监听整个电脑请求</p>
<p>方式二 【拦截本地浏览器】：<br>
cmd：<code>&quot;C:\Users\zsjw_pachong01\AppData\Local\Google\Chrome\Application\chrome.exe&quot; --proxy-server=127.0.0.1:8080 --ignore-certificate-errors</code><br>
这里把谷歌的路径替换一下就可以</p>
<p>方式三 【拦截本地浏览器】：<br>
在谷歌商店下载<code>Proxy SwitchyOmega</code>插件，并进行设置即可(如下图)</p>
</blockquote>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20200427191754567.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NjQ4OTkx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<h1 id="示例代码">示例代码</h1>
<p>拦截文件 scripy.py</p>
<pre><code class="language-python">def request(flow):
    flow.request.headers['User-Agent'] = 'MitmProxy'
    print(flow.request.headers)
</code></pre>
<p>启动拦截文件<br>
<code>mitmdump -s script.py -p 8888</code></p>
<p>爬虫文件 spider.py</p>
<pre><code class="language-python"># -*- coding: utf-8 -*-

from selenium import webdriver

options = webdriver.ChromeOptions()
options.add_argument(r'--proxy-server=http://localhost:8888')
driver = webdriver.Chrome(chrome_options=options)
driver.get('https://httpbin.org/get')
</code></pre>
<p>效果如下<br>
<img src="https://img-blog.csdnimg.cn/20200427191947797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NjQ4OTkx,size_16,color_FFFFFF,t_70" alt="" loading="lazy"></p>
<h1 id="配置二级代理">配置二级代理</h1>
<blockquote>
<p>由于平台限制，软件看图吧</p>
</blockquote>
<h2 id="方法一">方法一</h2>
<h3 id="修改x2yyy配置文件">修改X2yyy配置文件</h3>
<p>采用的X2yyy，命令行启动代理</p>
<p><img src="https://img-blog.csdnimg.cn/20200428170903415.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NjQ4OTkx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
修改config文件，注意查看下面的参数：<br>
这里请求的类型可以是socks或者是http，如果不能fq说明请求类型不对，自己试试哪个可行用哪个！</p>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/20200428170955919.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NjQ4OTkx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<p>双击运行X2yyy.exe即可，测试google成功</p>
<figure data-type="image" tabindex="6"><img src="https://img-blog.csdnimg.cn/20200428171031520.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NjQ4OTkx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<h3 id="拦截文件">拦截文件</h3>
<pre><code class="language-python">import mitmproxy.http
from mitmproxy import ctx


class Counter:
    def __init__(self):
        self.num = 0

    def request(self, flow):
        # if flow.request.method == &quot;CONNECT&quot;:
        #     # If the decision is done by domain, one could also modify the server address here.
        #     # We do it after CONNECT here to have the request data available as well.
        #     return
        address = ('localhost', 10808)
        if flow.live:
            flow.live.change_upstream_proxy_server(address)  # type: ignore



addons = [
    Counter()
]
</code></pre>
<blockquote>
<p>启动参数：mitmdump --mode upstream:http://localhost:10808/ -s xxxx.py<br>
注意：<br>
拦截文件的参数：address = ('localhost', 10808) 必须跟X2yyy的运行端口一致<br>
启动参数：upstream:http://localhost:10808 必须也为X2yyy的运行端口</p>
</blockquote>
<h3 id="启动文件">启动文件</h3>
<pre><code class="language-python"># -*- coding: utf-8 -*-
'''
@author: pylemon
@time: 2019/12/2 18:20
'''

from selenium import webdriver

# 添加 mitmporxy 拦截端口
options = webdriver.ChromeOptions()
options.add_argument(r'--proxy-server=http://127.0.0.1:8080')
driver = webdriver.Chrome(chrome_options=options)

driver.get('https://www.google.com')

</code></pre>
<blockquote>
<p><strong>注意：</strong><br>
这里代理的端口必须为mitmproxy的端口proxy-server=http://127.0.0.1:8080</p>
</blockquote>
<figure data-type="image" tabindex="7"><img src="https://img-blog.csdnimg.cn/20200428171335182.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NjQ4OTkx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="方法二">方法二</h2>
<p>这里使用Sxx软件实现二级代理</p>
<blockquote>
<p>mitmdump 启动文件<br>
<strong>注意</strong><br>
这里<code>import socks</code> 可能会报错 需要手动导入包源文件<br>
方式一：<a href="http://socksipy.sourceforge.net/">官网</a> <a href="https://sourceforge.net/projects/socksipy/">下载地址</a><br>
方式二：<a href="http://note.youdao.com/noteshare?id=416a40b3a2d6c04a06692fea2e25e21a">源文件下载</a>（记得看源文件说明）<br>
文件保存路径：<code>python\Lib\site-packages</code></p>
</blockquote>
<pre><code class="language-python">import socks
import socket
socks.setdefaultproxy(socks.PROXY_TYPE_SOCKS5, &quot;localhost&quot;, 1080)
socks.setdefaultproxy(socks.PROXY_TYPE_SOCKS4, &quot;localhost&quot;, 1080)
socks.setdefaultproxy(socks.PROXY_TYPE_HTTP, &quot;localhost&quot;, 1080)

socket.socket = socks.socksocket
def request(flow):
    # proxy = ('localhost', 1080)
    # flow.live.change_upstream_proxy_server(proxy)
    pass
</code></pre>
<blockquote>
<p>测试代码文件<br>
test_proxy.py</p>
</blockquote>
<pre><code class="language-python"># -*- coding: utf-8 -*-
from selenium import webdriver

options = webdriver.ChromeOptions()
# options.add_argument('--proxy-server={}'.format('http://default-upstream-proxy.local:8080'))
options.add_argument('--proxy-server={}'.format('http://127.0.0.1:8080'))
driver = webdriver.Chrome(chrome_options=options)

driver.get('https://httpbin.org/get')

</code></pre>
<blockquote>
<p>效果如下</p>
</blockquote>
<figure data-type="image" tabindex="8"><img src="https://img-blog.csdnimg.cn/20200428171456299.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NjQ4OTkx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
]]></content>
    </entry>
</feed>